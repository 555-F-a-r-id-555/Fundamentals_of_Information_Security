import bcrypt
import re

def check_password_complexity(password):
    errors = []
    
    # 1. –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(password) < 8:
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 2. –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
    if not re.search(r'[A-Z–ê-–Ø]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
    
    # 3. –ù–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
    if not re.search(r'[a-z–∞-—è]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É")
    
    # 4. –ù–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä
    if not re.search(r'[0-9]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
    
    # 5. –ù–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    if not re.search(r'[!@#$%^&*()_+{}\[\]:;<>,.?/~`\-="\\]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª (!@#$%^&* –∏ —Ç. –¥.)")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
    weak_passwords = ["123456", "password", "qwerty", "123456789", "admin"]
    if password.lower() in weak_passwords:
        errors.append("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö —É—Ç–µ—á–µ–∫)")
    
    # 7. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –º–µ–Ω–µ–µ 5)
    if len(set(password)) < 5:
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    if errors:
        return False, "\n".join(errors)
    else:
        return True, "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!"

def hash_password(password):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    salt = bcrypt.gensalt()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è "—Å–æ–ª–∏"
    hashed = bcrypt.hashpw(password.encode(), salt)
    return hashed.decode()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ bytes

def verify_password(password, hashed_password):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—Ç–∏–≤ —Ö–µ—à–∞
    return bcrypt.checkpw(password.encode(), hashed_password.encode())

def main():
    print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –∏ –µ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (bcrypt)")
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
    
    is_strong, message = check_password_complexity(password)
    print(message)
    
    if is_strong:
        hashed = hash_password(password)
        print(f"üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (bcrypt): {hashed}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        test_password = input("\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑ (–¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏): ")
        if verify_password(test_password, hashed):
            print("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ö–µ—à–µ–º!")
        else:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")

if __name__ == "__main__":
    main()