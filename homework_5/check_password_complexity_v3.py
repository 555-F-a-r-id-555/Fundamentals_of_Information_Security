import bcrypt
import re
import hashlib
import requests

def check_password_complexity(password):
    errors = []
    
    if len(password) < 8:
        errors.append("‚ùå –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
    if not re.search(r'[A-Z–ê-–Ø]', password):
        errors.append("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (A-Z, –ê-–Ø)")
    if not re.search(r'[a-z–∞-—è]', password):
        errors.append("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (a-z, –∞-—è)")
    if not re.search(r'[0-9]', password):
        errors.append("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É (0-9)")
    if not re.search(r'[!@#$%^&*()_+{}\[\]:;<>,.?/~`\-="\\]', password):
        errors.append("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª (!@#$%^&* –∏ —Ç. –¥.)")
    if len(set(password)) < 5:
        errors.append("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    weak_passwords = ["123456", "password", "qwerty", "123456789", "admin"]
    if password.lower() in weak_passwords:
        errors.append("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π (–µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö —É—Ç–µ—á–µ–∫)")
    
    return (False, errors) if errors else (True, "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")

def check_hibp(password):
    sha1_hash = hashlib.sha1(password.encode()).hexdigest().upper()
    prefix, suffix = sha1_hash[:5], sha1_hash[5:]
    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            hashes = [line.split(":")[0] for line in response.text.splitlines()]
            return suffix in hashes
        return False
    except requests.RequestException:
        return False

def generate_strong_password():
    import random
    import string
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(random.choice(chars) for _ in range(12))

def main():
    print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –∏ –µ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (bcrypt + HIBP)")
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º HIBP
    if check_hibp(password):
        print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!")
        print("–ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:", generate_strong_password())
        return
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    is_strong, message = check_password_complexity(password)
    if not is_strong:
        print("\n–û—à–∏–±–∫–∏ –≤ –ø–∞—Ä–æ–ª–µ:")
        for error in message:
            print(error)
        print("\n–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("- –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.")
        print("- –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–æ–ª—è:", generate_strong_password())
        return
    
    # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
    hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    print("\n‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–¥—ë–∂–Ω—ã–π! –•–µ—à (bcrypt):", hashed)

if __name__ == "__main__":
    main()